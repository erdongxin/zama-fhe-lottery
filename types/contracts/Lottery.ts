/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "buyTicket"
      | "createRound"
      | "draw"
      | "getRound"
      | "getWinners"
      | "rounds"
      | "roundsCount"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRound",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "draw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundsCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundsCount",
    data: BytesLike
  ): Result;
}

export interface Lottery extends BaseContract {
  connect(runner?: ContractRunner | null): Lottery;
  waitForDeployment(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  buyTicket: TypedContractMethod<
    [roundId: BigNumberish, number: BigNumberish],
    [void],
    "nonpayable"
  >;

  createRound: TypedContractMethod<
    [name: string, drawTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  draw: TypedContractMethod<
    [roundId: BigNumberish, winningNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  getRound: TypedContractMethod<
    [roundId: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint, bigint] & {
        name: string;
        winningNumber: bigint;
        drawTime: bigint;
        drawn: boolean;
        ticketCount: bigint;
        winnerCount: bigint;
      }
    ],
    "view"
  >;

  getWinners: TypedContractMethod<[roundId: BigNumberish], [string[]], "view">;

  rounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        name: string;
        drawTime: bigint;
        drawn: boolean;
        winningNumber: bigint;
      }
    ],
    "view"
  >;

  roundsCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<
    [roundId: BigNumberish, number: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRound"
  ): TypedContractMethod<
    [name: string, drawTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "draw"
  ): TypedContractMethod<
    [roundId: BigNumberish, winningNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint, bigint] & {
        name: string;
        winningNumber: bigint;
        drawTime: bigint;
        drawn: boolean;
        ticketCount: bigint;
        winnerCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinners"
  ): TypedContractMethod<[roundId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "rounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        name: string;
        drawTime: bigint;
        drawn: boolean;
        winningNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "roundsCount"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
