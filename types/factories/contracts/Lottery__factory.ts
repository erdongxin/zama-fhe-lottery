/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Lottery, LotteryInterface } from "../../contracts/Lottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "number",
        type: "uint32",
      },
    ],
    name: "buyTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "drawTime",
        type: "uint256",
      },
    ],
    name: "createRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "winningNumber",
        type: "uint32",
      },
    ],
    name: "draw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getRound",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint32",
        name: "winningNumber",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "drawTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "drawn",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "ticketCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "winnerCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getWinners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rounds",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "drawTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "drawn",
        type: "bool",
      },
      {
        internalType: "uint32",
        name: "winningNumber",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b50600180546001600160a01b03191633179055610c978061002f5f395ff3fe608060405234801561000f575f80fd5b5060043610610085575f3560e01c80639f5cfe03116100585780639f5cfe031461010f578063b59d9c881461011f578063f851a44014610132578063fc79735c1461015d575f80fd5b80636b1426a4146100895780637a05a2f1146100b25780638c65c81f146100c75780638f1327c0146100ea575b5f80fd5b61009c61009736600461093d565b610170565b6040516100a99190610954565b60405180910390f35b6100c56100c03660046109a0565b610296565b005b6100da6100d536600461093d565b61038e565b6040516100a99493929190610a54565b6100fd6100f836600461093d565b610458565b6040516100a996959493929190610a88565b5f546040519081526020016100a9565b6100c561012d366004610ac9565b610592565b600154610145906001600160a01b031681565b6040516001600160a01b0390911681526020016100a9565b6100c561016b366004610ac9565b61070c565b5f5460609082106101ba5760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081b9bdd08195e1a5cdd608a1b60448201526064015b60405180910390fd5b5f8083815481106101cd576101cd610aff565b5f9182526020909120600590910201600281015490915060ff166102335760405162461bcd60e51b815260206004820152601f60248201527f57696e6e6572732076697369626c65206f6e6c7920616674657220647261770060448201526064016101b1565b8060040180548060200260200160405190810160405280929190818152602001828054801561028957602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831161026b575b5050505050915050919050565b6001546001600160a01b031633146102dd5760405162461bcd60e51b815260206004820152600a60248201526927b7363c9030b236b4b760b11b60448201526064016101b1565b42811161032c5760405162461bcd60e51b815260206004820152601b60248201527f447261772074696d65206d75737420626520696e20667574757265000000000060448201526064016101b1565b5f80546001908101808355828052829161034591610b13565b8154811061035557610355610aff565b5f9182526020909120600590910201905080610372848683610bd0565b506001810191909155600201805464ffffffffff191690555050565b5f818154811061039c575f80fd5b905f5260205f2090600502015f91509050805f0180546103bb90610b4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103e790610b4c565b80156104325780601f1061040957610100808354040283529160200191610432565b820191905f5260205f20905b81548152906001019060200180831161041557829003601f168201915b50505050600183015460029093015491929160ff81169150610100900463ffffffff1684565b60605f805f805f808054905087106104a45760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081b9bdd08195e1a5cdd608a1b60448201526064016101b1565b5f8088815481106104b7576104b7610aff565b5f9182526020909120600590910201600281015460018201546003830154600484015484549495508594610100850463ffffffff169460ff1692919086906104fe90610b4c565b80601f016020809104026020016040519081016040528092919081815260200182805461052a90610b4c565b80156105755780601f1061054c57610100808354040283529160200191610575565b820191905f5260205f20905b81548152906001019060200180831161055857829003601f168201915b505050505095509650965096509650965096505091939550919395565b5f5482106105d45760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081b9bdd08195e1a5cdd608a1b60448201526064016101b1565b5f8083815481106105e7576105e7610aff565b5f9182526020909120600590910201600281015490915060ff161561063e5760405162461bcd60e51b815260206004820152600d60248201526c20b63932b0b23c90323930bbb760991b60448201526064016101b1565b806001015442106106915760405162461bcd60e51b815260206004820152600c60248201527f526f756e6420636c6f736564000000000000000000000000000000000000000060448201526064016101b1565b6040805180820190915233815263ffffffff9283166020808301918252600390930180546001810182555f91825293902091519190920180549251909316600160a01b027fffffffffffffffff0000000000000000000000000000000000000000000000009092166001600160a01b03919091161717905550565b6001546001600160a01b031633146107535760405162461bcd60e51b815260206004820152600a60248201526927b7363c9030b236b4b760b11b60448201526064016101b1565b5f5482106107955760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081b9bdd08195e1a5cdd608a1b60448201526064016101b1565b5f8083815481106107a8576107a8610aff565b5f9182526020909120600590910201600281015490915060ff16156107ff5760405162461bcd60e51b815260206004820152600d60248201526c20b63932b0b23c90323930bbb760991b60448201526064016101b1565b80600101544210156108535760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742064726177206265666f726520647261772074696d650000000060448201526064016101b1565b60028101805464ffffffff00191661010063ffffffff8516021790555f5b600382015481101561092a578263ffffffff1682600301828154811061089957610899610aff565b5f91825260209091200154600160a01b900463ffffffff160361092257816004018260030182815481106108cf576108cf610aff565b5f9182526020808320909101548354600181018555938352912090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039092169190911790555b600101610871565b50600201805460ff191660011790555050565b5f6020828403121561094d575f80fd5b5035919050565b602080825282518282018190525f9190848201906040850190845b818110156109945783516001600160a01b03168352928401929184019160010161096f565b50909695505050505050565b5f805f604084860312156109b2575f80fd5b833567ffffffffffffffff808211156109c9575f80fd5b818601915086601f8301126109dc575f80fd5b8135818111156109ea575f80fd5b8760208285010111156109fb575f80fd5b6020928301989097509590910135949350505050565b5f81518084525f5b81811015610a3557602081850181015186830182015201610a19565b505f602082860101526020601f19601f83011685010191505092915050565b608081525f610a666080830187610a11565b602083019590955250911515604083015263ffffffff16606090910152919050565b60c081525f610a9a60c0830189610a11565b63ffffffff9790971660208301525060408101949094529115156060840152608083015260a090910152919050565b5f8060408385031215610ada575f80fd5b82359150602083013563ffffffff81168114610af4575f80fd5b809150509250929050565b634e487b7160e01b5f52603260045260245ffd5b81810381811115610b3257634e487b7160e01b5f52601160045260245ffd5b92915050565b634e487b7160e01b5f52604160045260245ffd5b600181811c90821680610b6057607f821691505b602082108103610b7e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610bcb57805f5260205f20601f840160051c81016020851015610ba95750805b601f840160051c820191505b81811015610bc8575f8155600101610bb5565b50505b505050565b67ffffffffffffffff831115610be857610be8610b38565b610bfc83610bf68354610b4c565b83610b84565b5f601f841160018114610c2d575f8515610c165750838201355b5f19600387901b1c1916600186901b178355610bc8565b5f83815260208120601f198716915b82811015610c5c5786850135825560209485019460019092019101610c3c565b5086821015610c78575f1960f88860031b161c19848701351681555b505060018560011b018355505050505056fea164736f6c6343000818000a";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Lottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Lottery__factory {
    return super.connect(runner) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new Interface(_abi) as LotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lottery {
    return new Contract(address, _abi, runner) as unknown as Lottery;
  }
}
