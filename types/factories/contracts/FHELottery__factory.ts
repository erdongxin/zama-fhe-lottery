/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FHELottery,
  FHELotteryInterface,
} from "../../contracts/FHELottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        internalType: "externalEuint32",
        name: "number",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "buyTicket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "drawTime",
        type: "uint256",
      },
    ],
    name: "createRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "plainWinningNumber",
        type: "uint32",
      },
    ],
    name: "draw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getRound",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint32",
        name: "winningNumber",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "drawTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "drawn",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "ticketCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "winnerCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getWinners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rounds",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "drawTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "drawn",
        type: "bool",
      },
      {
        internalType: "euint32",
        name: "winningNumber",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5061018a6100ae604080516080810182525f808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b600180546001600160a01b031916331790556111d4806101a95f395ff3fe608060405234801561000f575f80fd5b506004361061009f575f3560e01c80639f5cfe0311610072578063f851a44011610058578063f851a44014610142578063f97590221461016d578063fc79735c14610180575f80fd5b80639f5cfe0314610129578063da1f12ab1461013a575f80fd5b80636b1426a4146100a35780637a05a2f1146100cc5780638c65c81f146100e15780638f1327c014610104575b5f80fd5b6100b66100b1366004610d3f565b610193565b6040516100c39190610d56565b60405180910390f35b6100df6100da366004610da2565b6102b9565b005b6100f46100ef366004610d3f565b6103bd565b6040516100c39493929190610e56565b610117610112366004610d3f565b610483565b6040516100c396959493929190610e84565b5f545b6040519081526020016100c3565b61271161012c565b600154610155906001600160a01b031681565b6040516001600160a01b0390911681526020016100c3565b6100df61017b366004610ed9565b6105cc565b6100df61018e366004610f96565b61075c565b5f5460609082106101dd5760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081b9bdd08195e1a5cdd608a1b60448201526064015b60405180910390fd5b5f8083815481106101f0576101f0610fcc565b5f9182526020909120600690910201600281015490915060ff166102565760405162461bcd60e51b815260206004820152601f60248201527f57696e6e6572732076697369626c65206f6e6c7920616674657220647261770060448201526064016101d4565b806005018054806020026020016040519081016040528092919081815260200182805480156102ac57602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831161028e575b5050505050915050919050565b6001546001600160a01b031633146103005760405162461bcd60e51b815260206004820152600a60248201526927b7363c9030b236b4b760b11b60448201526064016101d4565b42811161034f5760405162461bcd60e51b815260206004820152601b60248201527f447261772074696d65206d75737420626520696e20667574757265000000000060448201526064016101d4565b5f80546001908101808355828052829161036891610fe0565b8154811061037857610378610fcc565b5f9182526020909120600690910201905080610395848683611083565b506001810182905560028101805460ff191690556103b25f61097e565b600390910155505050565b5f81815481106103cb575f80fd5b905f5260205f2090600602015f91509050805f0180546103ea90610fff565b80601f016020809104026020016040519081016040528092919081815260200182805461041690610fff565b80156104615780601f1061043857610100808354040283529160200191610461565b820191905f5260205f20905b81548152906001019060200180831161044457829003601f168201915b50505050600183015460028401546003909401549293909260ff909116915084565b60605f805f805f808054905087106104cf5760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081b9bdd08195e1a5cdd608a1b60448201526064016101d4565b5f8088815481106104e2576104e2610fcc565b5f9182526020822060026006909202019081015490925060ff1615610508575060038101545b6001820154600283015460048401546005850154855486948694909360ff909116929091869061053790610fff565b80601f016020809104026020016040519081016040528092919081815260200182805461056390610fff565b80156105ae5780601f10610585576101008083540402835291602001916105ae565b820191905f5260205f20905b81548152906001019060200180831161059157829003601f168201915b50505050509550975097509750975097509750505091939550919395565b5f54831061060e5760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081b9bdd08195e1a5cdd608a1b60448201526064016101d4565b5f80848154811061062157610621610fcc565b5f9182526020909120600690910201600281015490915060ff16156106785760405162461bcd60e51b815260206004820152600d60248201526c20b63932b0b23c90323930bbb760991b60448201526064016101d4565b806001015442106106cb5760405162461bcd60e51b815260206004820152600c60248201527f526f756e6420636c6f736564000000000000000000000000000000000000000060448201526064016101d4565b5f6106d68484610996565b60408051808201909152338082526020808301848152600487018054600180820183555f9283529390912094516002909102909401805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039095169490941784555192019190915590915061074a9082906109aa565b50610754816109bc565b505050505050565b6001546001600160a01b031633146107a35760405162461bcd60e51b815260206004820152600a60248201526927b7363c9030b236b4b760b11b60448201526064016101d4565b5f5482106107e55760405162461bcd60e51b815260206004820152600f60248201526e149bdd5b99081b9bdd08195e1a5cdd608a1b60448201526064016101d4565b5f8083815481106107f8576107f8610fcc565b5f9182526020909120600690910201600281015490915060ff161561084f5760405162461bcd60e51b815260206004820152600d60248201526c20b63932b0b23c90323930bbb760991b60448201526064016101d4565b80600101544210156108a35760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742064726177206265666f726520647261772074696d650000000060448201526064016101d4565b5f6108ad8361097e565b6003830181905590505f5b600483015481101561096a575f6108f38460040183815481106108dd576108dd610fcc565b905f5260205f20906002020160010154846109cb565b90508015610961578360050184600401838154811061091457610914610fcc565b5f918252602080832060029092029091015483546001810185559383529120909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790555b506001016108b8565b5050600201805460ff191660011790555050565b5f6109908263ffffffff1660046109f9565b92915050565b5f6109a383836004610ab6565b9392505050565b5f6109b58383610bd6565b5090919050565b5f6109c78230610bd6565b5090565b5f826109dd576109da5f61097e565b92505b816109ee576109eb5f61097e565b91505b6109a383835f610c5f565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b0390911690639cd07acb90610a6e908790879060040161115d565b6020604051808303815f875af1158015610a8a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aae9190611171565b949350505050565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b039091169063196d0b9b90610b2f908890339089908990600401611188565b6020604051808303815f875af1158015610b4b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b6f9190611171565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b158015610bb8575f80fd5b505af1158015610bca573d5f803e3d5ffd5b50505050509392505050565b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497008054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b158015610c44575f80fd5b505af1158015610c56573d5f803e3d5ffd5b50505050505050565b5f808215610c725750600160f81b610c75565b505f5b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700600181015460405163f77f3f1d60e01b815260048101899052602481018890527fff00000000000000000000000000000000000000000000000000000000000000851660448201529192506001600160a01b03169063f77f3f1d906064016020604051808303815f875af1158015610d11573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d359190611171565b9695505050505050565b5f60208284031215610d4f575f80fd5b5035919050565b602080825282518282018190525f9190848201906040850190845b81811015610d965783516001600160a01b031683529284019291840191600101610d71565b50909695505050505050565b5f805f60408486031215610db4575f80fd5b833567ffffffffffffffff80821115610dcb575f80fd5b818601915086601f830112610dde575f80fd5b813581811115610dec575f80fd5b876020828501011115610dfd575f80fd5b6020928301989097509590910135949350505050565b5f81518084525f5b81811015610e3757602081850181015186830182015201610e1b565b505f602082860101526020601f19601f83011685010191505092915050565b608081525f610e686080830187610e13565b6020830195909552509115156040830152606090910152919050565b60c081525f610e9660c0830189610e13565b63ffffffff9790971660208301525060408101949094529115156060840152608083015260a090910152919050565b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610eeb575f80fd5b8335925060208401359150604084013567ffffffffffffffff80821115610f10575f80fd5b818601915086601f830112610f23575f80fd5b813581811115610f3557610f35610ec5565b604051601f8201601f19908116603f01168101908382118183101715610f5d57610f5d610ec5565b81604052828152896020848701011115610f75575f80fd5b826020860160208301375f6020848301015280955050505050509250925092565b5f8060408385031215610fa7575f80fd5b82359150602083013563ffffffff81168114610fc1575f80fd5b809150509250929050565b634e487b7160e01b5f52603260045260245ffd5b8181038181111561099057634e487b7160e01b5f52601160045260245ffd5b600181811c9082168061101357607f821691505b60208210810361103157634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561107e57805f5260205f20601f840160051c8101602085101561105c5750805b601f840160051c820191505b8181101561107b575f8155600101611068565b50505b505050565b67ffffffffffffffff83111561109b5761109b610ec5565b6110af836110a98354610fff565b83611037565b5f601f8411600181146110e0575f85156110c95750838201355b5f19600387901b1c1916600186901b17835561107b565b5f83815260208120601f198716915b8281101561110f57868501358255602094850194600190920191016110ef565b508682101561112b575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6054811061115957634e487b7160e01b5f52602160045260245ffd5b9052565b828152604081016109a3602083018461113d565b5f60208284031215611181575f80fd5b5051919050565b8481526001600160a01b0384166020820152608060408201525f6111af6080830185610e13565b90506111be606083018461113d565b9594505050505056fea164736f6c6343000818000a";

type FHELotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FHELotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FHELottery__factory extends ContractFactory {
  constructor(...args: FHELotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FHELottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FHELottery__factory {
    return super.connect(runner) as FHELottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FHELotteryInterface {
    return new Interface(_abi) as FHELotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FHELottery {
    return new Contract(address, _abi, runner) as unknown as FHELottery;
  }
}
